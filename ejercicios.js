/* PrÃ³ximo en la Fila

En informÃ¡tica una cola (queue) es una estructura de datos abstracta en la cual los elementos se mantienen en orden. Los nuevos elementos se pueden aÃ±adir al final de la cola y los elementos previos se retiran del principio de la cola.

Define una funciÃ³n proximoEnLaFila que tome un arreglo (arreglo) y un nÃºmero (elemento) como argumentos. Agrega el nÃºmero al final del arreglo y luego elimina el primer elemento del arreglo. La funciÃ³n proximoEnLaFila debe retornar el elemento que fue removido.

*/
function proximoEnLaFila(arreglo, elemento) {
    arreglo.push(elemento);       
    return arreglo.shift();       
  }
  let miCola = [1, 2, 3, 4, 5];
  console.log("COLA ANTES:", miCola);
  let eliminado = proximoEnLaFila(miCola, 6);
  console.log("ELEMENTO REMOVIDO:", eliminado);
  console.log("COLA DESPUÃ‰S:", miCola);

// 1. CONJUNCIÃ“N (AND - &&)
let tablaAND = [
  { p: false, q: false, "p && q": false && false },
  { p: false, q: true,  "p && q": false && true },
  { p: true,  q: false, "p && q": true && false },
  { p: true,  q: true,  "p && q": true && true }
];
console.log("ðŸ”¹ CONJUNCIÃ“N (AND - &&)");
console.table(tablaAND);

// 2. DISYUNCIÃ“N (OR - ||)
let tablaOR = [
  { p: false, q: false, "p || q": false || false },
  { p: false, q: true,  "p || q": false || true },
  { p: true,  q: false, "p || q": true || false },
  { p: true,  q: true,  "p || q": true || true }
];
console.log("ðŸ”¹ DISYUNCIÃ“N (OR - ||)");
console.table(tablaOR);

// 3. NEGACIÃ“N (NOT - !)
let tablaNOT = [
  { p: false, "!p": !false },
  { p: true,  "!p": !true }
];
console.log("ðŸ”¹ NEGACIÃ“N (NOT - !)");
console.table(tablaNOT);

// 4. IMPLICACIÃ“N (p â†’ q) 
let tablaImplica = [
  { p: false, q: false, "p â†’ q": !false || false },
  { p: false, q: true,  "p â†’ q": !false || true },
  { p: true,  q: false, "p â†’ q": !true || false },
  { p: true,  q: true,  "p â†’ q": !true || true }
];
console.log("ðŸ”¹ IMPLICACIÃ“N (p â†’ q)");
console.table(tablaImplica);

// 5. BICONDICIONAL (p â†” q) 
let tablaBicondicional = [
  { p: false, q: false, "p â†” q": false === false },
  { p: false, q: true,  "p â†” q": false === true },
  { p: true,  q: false, "p â†” q": true === false },
  { p: true,  q: true,  "p â†” q": true === true }
];
console.log("ðŸ”¹ BICONDICIONAL (p â†” q)");
console.table(tablaBicondicional);
